version: 2.1

orbs:
  slack: circleci/slack@4.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"

    steps:
      - run:
          name: Destroy environments
          when: << parameters.when_to_run >> 
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            aws s3 rm --recursive  s3://udapeople-${CIRCLE_WORKFLOW_ID}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token:  ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi            
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail 
          template: basic_fail_1
          channel: '#devOps'

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
           cd frontend
            npm install
            sudo npm update
            sudo npm install npm@latest -g
            sudo npm install webpack
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
           cd backend
           npm install
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
           cd frontend
           npm install
           npm run test4ci

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend-end
          command: |
           cd backend
           npm install
           npm run test
      - run:
          name: e2e test backend-end 
          command: |
           cd backend
           npm install
           npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [Frontend-build]
      - run:
          name: scan front-end
          command: |
           cd frontend
           npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan front-end
          command: |
           cd backend
           npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: C022RQRDUNP
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip jq npm
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
                #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             echo "[web]" > .circleci/ansible/inventory.txt
             INSTANCE_IP=$(aws ec2 describe-instances \
             --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text >> ./.circleci/ansible/inventory.txt)

              echo ${INSTANCE_IP} >> ./.circleci/ansible/inventory.txt
              echo INSTANCE_IP ${INSTANCE_IP}

              cat ./.circleci/ansible/inventory.txt

              curl -H "Content-Type: text/plain" -H "token: ac7bae0c-4466-4e1d-8e7c-47338a852c5f" \
              --request PUT \
              --data "$INSTANCE_IP" https://api.memstash.io/values/INSTANCE_IP
              #exit 1
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment

  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12 
      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['7f:b0:56:93:84:62:8f:47:4d:82:dd:ae:7a:86:85:2d']

      - attach_workspace:
            at: ./.circleci/ansible 

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add --update curl
            apk add --update gzip
            apk add --update nodejs 
            apk add --update py3-pip
            apk add --update tar
            pip3 install awscli

      - run:
          name: Configure server
          working_directory: ./.circleci/ansible 
          command: |
            echo PWD $(pwd)
            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1
      - destroy-environment
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python \
              python-pip \
              python-setuptools \
              curl
            pip install
            pip --no-cache-dir install --upgrade awscli

      - run:
          name: Run migrations
          command: |
            cd backend 
            sudo npm i -g pm2
            sudo npm install typescript
            npm install
            touch migrations.txt
            npm run migrations > migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep "has been executed successfully" migrations.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            yum install nodejs -y
            node --version
            npm --version
            yum install tar -y
            yum install gzip -y

      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            cd frontend
            touch .env
            BACKEND_IP=$(curl -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend-ip)
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="$API_URL" >> .env
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            sudo npm install webpack
            npm run build:prod
            aws s3 cp ~/project/frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env

      - destroy-environment
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['7f:b0:56:93:84:62:8f:47:4d:82:dd:ae:7a:86:85:2d']
  
      - attach_workspace:
            at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add ansible
            apk add curl
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            echo PWD $(pwd)
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - destroy-environment

      #  smoke-test:
      #    docker:
      #      # Lightweight Docker image 
      #    steps:
      #      # Checkout code from git
      #      - run:
      #          name: Install dependencies
      #          command: |
      #            # your code here
      #      - run:
      #          name: Get backend url
      #          command: |
      #            # your code here
      #      - run:
      #          name: Backend smoke test.
      #          command: |
      #            # your code here
      #      - run:
      #          name: Frontend smoke test.
      #          command: |
      #            # your code here
      #      # Here's where you will add some code to rollback on failure  
      #
      #  cloudfront-update:
      #    docker:
      #      # Docker image here that supports AWS CLI
      #    steps:
      #      # Checkout code from git
      #      - run:
      #          name: Install dependencies
      #          command: |
      #            # your code here
      #      - run:
      #          name: Update cloudfront distribution
      #          command: |
      #            # your code here
      #      # Here's where you will add some code to rollback on failure  
      #
      #cleanup:
      #    docker:
      #      # Docker image here
      #    steps:
      #      # Checkout code from git
      #      - run:
      #          name: Get old stack workflow id
      #          command: |
      #            # your code here
      #            export OldWorkflowID="the id here"
      #            export STACKS=[] #put the list of stacks here
      #      - run:
      #          name: Remove old stacks and files
      #          command: |
      #            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
      #            then
      #              # your code here
      #            fi
      #            

workflows:
  default:
     jobs:
       - build-frontend
       - build-backend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
       - notify:
           context: slack-secrets
       - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           filters:
             branches:
               only: [master]
               #only: [test-feature-branch]
       - configure-infrastructure:
           requires: [deploy-infrastructure]
       - run-migrations:
           requires: [configure-infrastructure]
       - deploy-frontend:
           requires: [run-migrations]
       - deploy-backend:
           requires: [run-migrations]
    #   - smoke-test:
    #       requires: [deploy-backend, deploy-frontend]
    #   - cloudfront-update:
    #       requires: [smoke-test]
    #   - cleanup:
    #       requires: [cloudfront-update]

