version: 2.1

orbs:
  slack: circleci/slack@4.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"

    steps:
      - run:
          name: Destroy environments
          when: << parameters.when_to_run >> 
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            aws s3 rm --recursive  s3://udapeople-${CIRCLE_WORKFLOW_ID}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token:  ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi            
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail 
          template: basic_fail_1
          channel: '#devOps'

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
           cd frontend
            npm install
            sudo npm update
            sudo npm install npm@latest -g
            sudo npm install webpack
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
           cd backend
           npm install
           sudo npm install typescript
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
           cd frontend
           npm install
           npm run test4ci

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend-end
          command: |
           cd backend
           npm install
           npm run test
      - run:
          name: e2e test backend-end 
          command: |
           cd backend
           npm install
           npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [Frontend-build]
      - run:
          name: scan front-end
          command: |
           cd frontend
           npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
           cd backend
           npm audit fix --audit-level=critical --force
           npm audit fix 
      - slack/notify:
          channel: C022RQRDUNP
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip jq npm
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             echo "[web]" > .circleci/ansible/inventory.txt
             BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
             echo ${BACKEND_IP} >> ./.circleci/ansible/inventory.txt
             echo BACKEND_IP ${BACKEND_IP}

      - persist_to_workspace:
           root: ~/
           paths:
             - project/.circleci/ansible/inventory.txt

      - destroy-environment
      - revert-migrations
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12 
      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['7f:b0:56:93:84:62:8f:47:4d:82:dd:ae:7a:86:85:2d']

      - attach_workspace:
            at: ~/ 

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add --update curl
            apk add --update gzip
            apk add --update nodejs 
            apk add --update py3-pip
            apk add --update tar
            pip3 install awscli

      - run:
          name: Configure server
          working_directory: ./.circleci/ansible 
          command: |
            echo PWD $(pwd)
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python \
              python-pip \
              python-setuptools \
              curl
            pip install
            pip --no-cache-dir install --upgrade awscli

      - run:
          name: Run migrations
          command: |
            cd backend 
            sudo npm i -g pm2
            sudo npm install typescript

            echo ENVIRONMENT=$ENVIRONMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            npm install
            touch migrations.txt
            npm run migrations >> migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep "has been executed successfully" migrations.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            yum install nodejs -y
            node --version
            npm --version
            yum install tar -y
            yum install gzip -y

      - attach_workspace:
          at: ~/
            
      - run:
          name: Get backend url
          command: |
            #cd frontend
            #touch .env
            
            BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
            # BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            #   --request GET https://api.memstash.io/values/BACKEND_IP)
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL: ${API_URL}"
            export API_URL=${API_URL}
            echo "${API_URL}" >> "frontend/.env"
      - run:
          name: Deploy frontend objects
          command: |
            # cd frontend
            cd frontend
            npm install
            sudo npm install webpack
            npm run build:prod
            aws s3 cp ~/project/frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env

      - destroy-environment
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['7f:b0:56:93:84:62:8f:47:4d:82:dd:ae:7a:86:85:2d']
  
      - attach_workspace:
            at: ~/
            #at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add ansible
            apk add curl
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            echo PWD $(pwd)
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd .circleci/ansible
            BACKEND_IP=`cat inventory.txt | head -2 | tail -1`
            echo "BACKEND_IP: ${BACKEND_IP}"
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update tar gzip curl nodejs npm
      - run:
          name: smoke test frontend
          command: |
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
              then
                return 1
              else
                return 0
            fi
      - run:
          name: smoke test for backend.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "http://${BACKEND_IP}:3030/api/status"
            curl "http://${BACKEND_IP}:3030/api/status"


      - destroy-environment 
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name=udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            --tags project=udapeople
      
      - destroy-environment 
      - revert-migrations

  cleanup:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query 'Exports[?Name==`WorkflowID`].Value' \
            --no-paginate --output text)
            
            export STACKS=($aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)          
            echo Old Workflow Id: "${OldWorkflowID}"
            echo New Workflow Id: "${CIRCLE_WORKFLOW_ID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-prod-backendstack-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-prod-frontendstack-${OldWorkflowID}"
            fi

workflows:
  default:
     jobs:
       - build-frontend
       - build-backend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
       - notify:
           context: slack-secrets
       - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           filters:
             branches:
               only: [master]
               #only: [test-feature-branch]
       - configure-infrastructure:
           requires: [deploy-infrastructure]
       - run-migrations:
           requires: [configure-infrastructure]
       - deploy-frontend:
           requires: [run-migrations]
       - deploy-backend:
           requires: [run-migrations]
       - smoke-test:
           requires: [deploy-backend, deploy-frontend]
       - cloudfront-update:
           requires: [smoke-test]
       - cleanup:
           requires: [cloudfront-update]

